;; Analyzed by ClojureScript 0.0-3058
{:defs {queue-delay {:protocol-inline nil, :meta {:arglists (quote ([f delay])), :end-column 19, :end-line 35, :column 7, :line 35, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs"}, :name cljs.core.async.impl.dispatch/queue-delay, :variadic false, :file "resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs", :end-column 19, :method-params ([f delay]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f delay])), :test true}, run {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 11, :end-line 31, :column 7, :line 31, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs"}, :name cljs.core.async.impl.dispatch/run, :variadic false, :file "resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs", :end-column 11, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, process-messages {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 24, :end-line 13, :column 7, :line 13, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs"}, :name cljs.core.async.impl.dispatch/process-messages, :variadic false, :file "resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, queue-dispatcher {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 24, :end-line 26, :column 7, :line 26, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs"}, :name cljs.core.async.impl.dispatch/queue-dispatcher, :variadic false, :file "resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 0}), :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, TASK_BATCH_SIZE {:meta {:end-column 22, :end-line 9, :column 6, :line 9, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs"}, :file "resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs", :line 9, :column 1, :end-line 9, :end-column 22, :test true, :name cljs.core.async.impl.dispatch/TASK_BATCH_SIZE}, queued? {:meta {:end-column 14, :end-line 7, :column 6, :line 7, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs"}, :file "resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs", :line 7, :column 1, :end-line 7, :end-column 14, :test true, :name cljs.core.async.impl.dispatch/queued?}, running? {:meta {:end-column 15, :end-line 6, :column 6, :line 6, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs"}, :file "resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs", :line 6, :column 1, :end-line 6, :end-column 15, :test true, :name cljs.core.async.impl.dispatch/running?}, tasks {:meta {:end-column 12, :end-line 5, :column 6, :line 5, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs"}, :file "resources\\public\\js\\out\\cljs\\core\\async\\impl\\dispatch.cljs", :line 5, :column 1, :end-line 5, :end-column 12, :test true, :name cljs.core.async.impl.dispatch/tasks}}, :imports nil, :requires {goog.async.nextTick goog.async.nextTick, cljs.core.async.impl.buffers cljs.core.async.impl.buffers, buffers cljs.core.async.impl.buffers}, :uses nil, :require-macros nil, :use-macros nil, :excludes #{}, :doc nil, :name cljs.core.async.impl.dispatch}