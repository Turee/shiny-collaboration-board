;; Analyzed by ClojureScript 0.0-3058
{:use-macros {dbg reagent.debug, .' reagent.interop, prn reagent.debug, .! reagent.interop}, :excludes #{}, :name reagent.impl.component, :imports nil, :requires {reagent.debug reagent.debug, reagent.interop reagent.interop, ratom reagent.ratom, reagent.ratom reagent.ratom, batch reagent.impl.batching, reagent.impl.batching reagent.impl.batching, reagent.impl.util reagent.impl.util, util reagent.impl.util}, :uses nil, :defs {get-wrapper {:protocol-inline nil, :meta {:arglists (quote ([key f name])), :end-column 19, :end-line 120, :column 7, :line 120, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/get-wrapper, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 19, :method-params ([key f name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any function}, :variadic false, :max-fixed-arity 3}), :line 120, :end-line 120, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key f name])), :test true}, obligatory {:meta {:end-column 17, :end-line 129, :column 6, :line 129, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :line 129, :column 1, :end-line 129, :end-column 17, :test true, :name reagent.impl.component/obligatory}, default-wrapper {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 23, :end-line 106, :column 7, :line 106, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/default-wrapper, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 23, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil function}, :variadic false, :max-fixed-arity 1}), :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, do-render {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 17, :end-line 33, :column 7, :line 33, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/do-render, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 17, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, add-obligatory {:protocol-inline nil, :meta {:arglists (quote ([fun-map])), :end-column 22, :end-line 139, :column 7, :line 139, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/add-obligatory, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 22, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 139, :end-line 139, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map])), :test true}, state-atom {:protocol-inline nil, :meta {:arglists (quote ([this])), :end-column 18, :end-line 13, :column 7, :line 13, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/state-atom, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, dash-to-camel {:meta {:end-column 20, :end-line 132, :column 6, :line 132, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :line 132, :column 1, :end-line 132, :end-column 20, :test true, :name reagent.impl.component/dash-to-camel}, map-to-js {:protocol-inline nil, :meta {:arglists (quote ([m])), :end-column 17, :end-line 168, :column 7, :line 168, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/map-to-js, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, dont-wrap {:meta {:end-column 16, :end-line 112, :column 6, :line 112, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :line 112, :column 1, :end-line 112, :end-column 16, :test true, :name reagent.impl.component/dont-wrap}, state {:protocol-inline nil, :meta {:arglists (quote ([this])), :end-column 13, :end-line 19, :column 7, :line 19, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/state, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :test true}, *current-component* {:meta {:declared true, :dynamic true, :end-column 40, :end-line 9, :column 20, :line 9, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/*current-component*, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 40, :column 1, :dynamic true, :line 9, :declared true, :end-line 9, :test true}, camelify-map-keys {:protocol-inline nil, :meta {:arglists (quote ([fun-map])), :end-column 25, :end-line 134, :column 7, :line 134, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/camelify-map-keys, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 25, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map])), :test true}, replace-state {:protocol-inline nil, :meta {:arglists (quote ([this new-state])), :end-column 21, :end-line 22, :column 7, :line 22, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/replace-state, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 21, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :test true}, cljsify {:protocol-inline nil, :meta {:arglists (quote ([body])), :end-column 15, :end-line 174, :column 7, :line 174, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/cljsify, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 15, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 174, :end-line 174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :test true}, dont-bind {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 17, :end-line 114, :column 7, :line 114, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/dont-bind, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 17, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, set-state {:protocol-inline nil, :meta {:arglists (quote ([this new-state])), :end-column 17, :end-line 27, :column 7, :line 27, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/set-state, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 17, :method-params ([this new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 2}), :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-state])), :test true}, add-render {:protocol-inline nil, :meta {:arglists (quote ([fun-map render-f])), :end-column 18, :end-line 142, :column 7, :line 142, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/add-render, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 18, :method-params ([fun-map render-f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj, :variadic false, :max-fixed-arity 2}), :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fun-map render-f])), :test true}, custom-wrapper {:protocol-inline nil, :meta {:arglists (quote ([key f])), :end-column 22, :end-line 60, :column 7, :line 60, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/custom-wrapper, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 22, :method-params ([key f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key f])), :test true}, create-class {:protocol-inline nil, :meta {:arglists (quote ([body as-component])), :end-column 20, :end-line 181, :column 7, :line 181, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/create-class, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 20, :method-params ([body as-component]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 2}), :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([body as-component])), :test true}, wrap-funs {:protocol-inline nil, :meta {:arglists (quote ([fun-map])), :end-column 17, :end-line 151, :column 7, :line 151, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\component.cljs"}, :name reagent.impl.component/wrap-funs, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\component.cljs", :end-column 17, :method-params ([fun-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fun-map])), :test true}}, :require-macros {reagent.debug reagent.debug, reagent.interop reagent.interop}, :cljs.analyzer/constants {:order [:cljsRender :render :componentFunction :shouldComponentUpdate :componentWillUnmount :displayName], :seen #{:displayName :cljsRender :componentWillUnmount :shouldComponentUpdate :render :componentFunction}}, :doc nil}