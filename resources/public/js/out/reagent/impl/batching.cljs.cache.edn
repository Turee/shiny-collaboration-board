;; Analyzed by ClojureScript 0.0-3058
{:use-macros {dbg reagent.debug, .' reagent.interop, .! reagent.interop}, :excludes #{flush}, :name reagent.impl.batching, :imports nil, :requires {string clojure.string, clojure.string clojure.string, reagent.impl.util reagent.impl.util, ratom reagent.ratom, reagent.ratom reagent.ratom, reagent.interop reagent.interop, reagent.debug reagent.debug}, :uses {is-client reagent.impl.util}, :defs {fake-raf {:protocol-inline nil, :meta {:arglists (quote ([f])), :end-column 16, :end-line 11, :column 7, :line 11, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :name reagent.impl.batching/fake-raf, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, run-reactively {:protocol-inline nil, :meta {:arglists (quote ([c run])), :end-column 22, :end-line 69, :column 7, :line 69, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :name reagent.impl.batching/run-reactively, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 22, :method-params ([c run]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c run])), :test true}, queue-render {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 20, :end-line 57, :column 7, :line 57, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :name reagent.impl.batching/queue-render, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 20, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, next-tick {:meta {:end-column 16, :end-line 14, :column 6, :line 14, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :line 14, :column 1, :end-line 14, :end-column 16, :test true, :name reagent.impl.batching/next-tick}, flush {:protocol-inline nil, :meta {:arglists (quote ([])), :end-column 13, :end-line 54, :column 7, :line 54, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :name reagent.impl.batching/flush, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 54, :end-line 54, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, mark-rendered {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 21, :end-line 61, :column 7, :line 61, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :name reagent.impl.batching/mark-rendered, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 21, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, render-queue {:meta {:end-column 19, :end-line 52, :column 6, :line 52, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :line 52, :column 1, :end-line 52, :end-column 19, :test true, :name reagent.impl.batching/render-queue}, RenderQueue {:num-fields 2, :protocols #{reagent.impl.batching/Object}, :name reagent.impl.batching/RenderQueue, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 22, :type true, :column 10, :line 37, :record false, :end-line 37, :skip-protocol-flag nil}, ->RenderQueue {:protocol-inline nil, :meta {:arglists (quote ([queue scheduled?])), :factory :positional, :skip-protocol-flag nil, :protocols #{reagent.impl.batching/Object}, :end-column 22, :end-line 37, :column 10, :line 37, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :protocols #{reagent.impl.batching/Object}, :name reagent.impl.batching/->RenderQueue, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 22, :method-params ([queue scheduled?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :methods ({:tag reagent.impl.batching/RenderQueue, :variadic false, :max-fixed-arity 2}), :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([queue scheduled?])), :skip-protocol-flag nil, :test true}, is-reagent-component {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 28, :end-line 66, :column 7, :line 66, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :name reagent.impl.batching/is-reagent-component, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 28, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}, run-queue {:protocol-inline nil, :meta {:arglists (quote ([a])), :end-column 17, :end-line 28, :column 7, :line 28, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :name reagent.impl.batching/run-queue, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 17, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a])), :test true}, compare-levels {:protocol-inline nil, :meta {:arglists (quote ([c1 c2])), :end-column 22, :end-line 24, :column 7, :line 24, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :name reagent.impl.batching/compare-levels, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 22, :method-params ([c1 c2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 2}), :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c1 c2])), :test true}, dispose {:protocol-inline nil, :meta {:arglists (quote ([c])), :end-column 15, :end-line 84, :column 7, :line 84, :file "C:\\github\\collab-board\\collab-board\\resources\\public\\js\\out\\reagent\\impl\\batching.cljs"}, :name reagent.impl.batching/dispose, :variadic false, :file "resources\\public\\js\\out\\reagent\\impl\\batching.cljs", :end-column 15, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :test true}}, :require-macros {reagent.interop reagent.interop, reagent.debug reagent.debug}, :cljs.analyzer/constants {:order [:auto-run :derefed], :seen #{:derefed :auto-run}}, :doc nil}